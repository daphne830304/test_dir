# This workfloww is to GitHub Actions to build a containerized application, 
# push it to Amazon Elastic Container Registry (ECR), 
# and deploy it to Amazon Elastic Container Service (ECS).

name: Deploy to Amazon EKS

on:
  push:
    branches: [ master ]


env:
  AWS_REGION: us-east-2                # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: movie-app          # set this to your Amazon ECR repository name
  ECS_SERVICE: movie-app-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: movie-app                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json # set this to the path to your Amazon ECS task definition
                                               #file, e.g. .aws/task-definition.json
  CONTAINER_NAME: movie-app           # set this to the name of the container in the
                                               #containerDefinitions section of your task definition
  KUBECONFIG: KUBECONFIG

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # permissions:
    #   packages: write
    #   contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Docker
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      
      - name: Subsitute ENV variables in kubernetes job yaml files and apply to kubernetes
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}

        run: |
          echo ${KUBE_CONFIG_DATA} | base64 -d > ${KUBECONFIG}
          kubectl config use-context arn:aws:eks:us-east-2:720641203850:cluster/prod-cluster 
          # kubectl delete jobs database-dump-demo
          cat demo-job.yml | envsubst | kubectl apply -f -
        
        
      # - name: Post to a Slack channel
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.14.0
      #   with:
      #     channel-id: 'CHANNEL_ID'  # Slack channel id to post message
      #     slack-message: 'posting from a github action!'
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}



# #       - name: Switch to staging cluster
# # #         run: kubectl config use-context prod-cluster
# #         uses: swdotcom/update-and-apply-kubernetes-configs@v1
# #         with:
# #           k8-config-file-paths: ./demo-job.yml 
# #           replacement-method: defined
# #         env:
# #           IMAGE_TAG: ${{ github.sha }}
# #           # CHANGE_CAUSE: ${{ github.event.release.tag_name }}

#       # - name: deploy to cluster  
#       #   uses: kodermax/kubectl-aws-eks@master  #this image allows kubectl usage
#       #   env:
#       #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
#       #     # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       #     # ECR_REPOSITORY: movie-app
#       #     # IMAGE_TAG: ${{ github.sha }}
#       #   with:
#       #     args: apply -f demo-job.yml
#           # create job testjob --image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           # cronjob kubectl create job --from=cronjob/<cronjob-name> <job-name> --image=image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



#       # - name: Fill in the new image ID in the Amazon ECS task definition
#       #   id: task-def
#       #   uses: aws-actions/amazon-ecs-render-task-definition@v1
#       #   with:
#       #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
#       #     container-name: ${{ env.CONTAINER_NAME }}
#       #     image: ${{ steps.build-image.outputs.image }}

#       # - name: Deploy Amazon ECS task definition
#       #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       #   with:
#       #     task-definition: ${{ steps.task-def.outputs.task-definition }}
#       #     service: ${{ env.ECS_SERVICE }}
#       #     cluster: ${{ env.ECS_CLUSTER }}
#       #     wait-for-service-stability: true
